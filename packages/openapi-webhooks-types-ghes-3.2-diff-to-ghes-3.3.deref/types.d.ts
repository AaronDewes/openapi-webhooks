/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/admin/hooks": {
    /** Create a global webhook */
    post: operations["enterprise-admin/create-global-webhook"];
  };
  "/admin/hooks/{hook_id}": {
    /** Get a global webhook */
    get: operations["enterprise-admin/get-global-webhook"];
    /**
     * Update a global webhook
     * @description Parameters that are not provided will be overwritten with the default value or removed if no default exists.
     */
    patch: operations["enterprise-admin/update-global-webhook"];
  };
  "/repos/{owner}/{repo}/actions/jobs/{job_id}": {
    /**
     * Get a job for a workflow run
     * @description Gets a specific job in a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
     */
    get: operations["actions/get-job-for-workflow-run"];
  };
  "/repos/{owner}/{repo}/actions/runs/{run_id}/jobs": {
    /**
     * List jobs for a workflow run
     * @description Lists jobs for a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/enterprise-server@3.2/rest/overview/resources-in-the-rest-api#parameters).
     */
    get: operations["actions/list-jobs-for-workflow-run"];
  };
  "/repos/{owner}/{repo}/code-scanning/alerts/{alert_number}": {
    /**
     * Get a code scanning alert
     * @description Gets a single code scanning alert. You must use an access token with the `security_events` scope to use this endpoint. GitHub Apps must have the `security_events` read permission to use this endpoint.
     *
     * **Deprecation notice**:
     * The instances field is deprecated and will, in future, not be included in the response for this endpoint. The example response reflects this change. The same information can now be retrieved via a GET request to the URL specified by `instances_url`.
     */
    get: operations["code-scanning/get-alert"];
    /**
     * Update a code scanning alert
     * @description Updates the status of a single code scanning alert. You must use an access token with the `security_events` scope to use this endpoint. GitHub Apps must have the `security_events` write permission to use this endpoint.
     */
    patch: operations["code-scanning/update-alert"];
  };
  "/repos/{owner}/{repo}/code-scanning/analyses": {
    /**
     * List code scanning analyses for a repository
     * @description Lists the details of all code scanning analyses for a repository,
     * starting with the most recent.
     * The response is paginated and you can use the `page` and `per_page` parameters
     * to list the analyses you're interested in.
     * By default 30 analyses are listed per page.
     *
     * The `rules_count` field in the response give the number of rules
     * that were run in the analysis.
     * For very old analyses this data is not available,
     * and `0` is returned in this field.
     *
     * You must use an access token with the `security_events` scope to use this endpoint.
     * GitHub Apps must have the `security_events` read permission to use this endpoint.
     *
     * **Deprecation notice**:
     * The `tool_name` field is deprecated and will, in future, not be included in the response for this endpoint. The example response reflects this change. The tool name can now be found inside the `tool` field.
     */
    get: operations["code-scanning/list-recent-analyses"];
  };
  "/repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}": {
    /**
     * Get a code scanning analysis for a repository
     * @description Gets a specified code scanning analysis for a repository.
     * You must use an access token with the `security_events` scope to use this endpoint.
     * GitHub Apps must have the `security_events` read permission to use this endpoint.
     *
     * The default JSON response contains fields that describe the analysis.
     * This includes the Git reference and commit SHA to which the analysis relates,
     * the datetime of the analysis, the name of the code scanning tool,
     * and the number of alerts.
     *
     * The `rules_count` field in the default response give the number of rules
     * that were run in the analysis.
     * For very old analyses this data is not available,
     * and `0` is returned in this field.
     *
     * If you use the Accept header `application/sarif+json`,
     * the response contains the analysis data that was uploaded.
     * This is formatted as
     * [SARIF version 2.1.0](https://docs.oasis-open.org/sarif/sarif/v2.1.0/cs01/sarif-v2.1.0-cs01.html).
     *
     * **Deprecation notice**:
     * The `tool_name` field is deprecated and will, in future, not be included in the response for this endpoint. The example response reflects this change. The tool name can now be found inside the `tool` field.
     */
    get: operations["code-scanning/get-analysis"];
  };
  "/repos/{owner}/{repo}/comments/{comment_id}/reactions": {
    /**
     * Create reaction for a commit comment
     * @description Create a reaction to a [commit comment](https://docs.github.com/enterprise-server@3.2/rest/reference/repos#comments). A response with an HTTP `200` status means that you already added the reaction type to this commit comment.
     */
    post: operations["reactions/create-for-commit-comment"];
  };
  "/repos/{owner}/{repo}/releases": {
    /**
     * Create a release
     * @description Users with push access to the repository can create a release.
     *
     * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/enterprise-server@3.2/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/enterprise-server@3.2/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
     */
    post: operations["repos/create-release"];
  };
  "/repos/{owner}/{repo}/releases/{release_id}/reactions": {
    /**
     * List reactions for a release
     * @description List the reactions to a [release](https://docs.github.com/enterprise-server@3.2/rest/reference/repos#releases).
     */
    get: operations["reactions/list-for-release"];
  };
  "/repos/{owner}/{repo}/topics": {
    /** Get all repository topics */
    get: operations["repos/get-all-topics"];
    /** Replace all repository topics */
    put: operations["repos/replace-all-topics"];
  };
  "/search/topics": {
    /**
     * Search topics
     * @description Find topics via various criteria. Results are sorted by best match. This method returns up to 100 results [per page](https://docs.github.com/enterprise-server@3.2/rest/overview/resources-in-the-rest-api#pagination). See "[Searching topics](https://docs.github.com/articles/searching-topics/)" for a detailed list of qualifiers.
     *
     * When searching for topics, you can get text match metadata for the topic's **short\_description**, **description**, **name**, or **display\_name** field when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/enterprise-server@3.2/rest/reference/search#text-match-metadata).
     *
     * For example, if you want to search for topics related to Ruby that are featured on https://github.com/topics. Your query might look like this:
     *
     * `q=ruby+is:featured`
     *
     * This query searches for topics with the keyword `ruby` and limits the results to find only topics that are featured. The topics that are the best match for the query appear first in the search results.
     */
    get: operations["search/topics"];
  };
  "/user/projects": {
    /** Create a user project */
    post: operations["projects/create-for-authenticated-user"];
  };
}

export type webhooks = Record<string, never>;

export type components = Record<string, never>;

export type external = Record<string, never>;

export interface operations {
  "enterprise-admin/create-global-webhook": {
    /** Create a global webhook */
    parameters: {
      /** @description This API is under preview and subject to change. */
      header: {
        accept: string;
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** @description Must be passed as "web". */
          name: string;
          /** @description Key/value pairs to provide settings for this webhook. */
          config: {
            /** @description The URL to which the payloads will be delivered. */
            url: string;
            /** @description The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`. */
            content_type?: string;
            /** @description If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value in the [`X-Hub-Signature`](https://docs.github.com/enterprise-server@3.2/webhooks/event-payloads/#delivery-headers) header. */
            secret?: string;
            /** @description Determines whether the SSL certificate of the host for `url` will be verified when delivering payloads. Supported values include `0` (verification is performed) and `1` (verification is not performed). The default is `0`. **We strongly recommend not setting this to `1` as you are subject to man-in-the-middle and other attacks.** */
            insecure_ssl?: string;
          };
          /** @description The [events](https://docs.github.com/enterprise-server@3.2/webhooks/event-payloads) that trigger this webhook. A global webhook can be triggered by `user` and `organization` events. Default: `user` and `organization`. */
          events?: string[];
          /**
           * @description Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.
           * @default true
           */
          active?: boolean;
        };
      };
    };
    responses: {
      /** @description Response */
      201: {
        content: {
          "application/json": {
            type?: string;
            id?: number;
            name?: string;
            active?: boolean;
            events?: string[];
            config?: {
              url?: string;
              content_type?: string;
              insecure_ssl?: string;
              secret?: string;
            };
            updated_at?: string;
            created_at?: string;
            url?: string;
            ping_url?: string;
          };
        };
      };
    };
  };
  "enterprise-admin/get-global-webhook": {
    /** Get a global webhook */
    parameters: {
      /** @description This API is under preview and subject to change. */
      header: {
        accept: string;
      };
      /** @description The unique identifier of the hook. */
      path: {
        hook_id: number;
      };
    };
    responses: {
      /** @description Response */
      200: {
        content: {
          "application/json": {
            type?: string;
            id?: number;
            name?: string;
            active?: boolean;
            events?: string[];
            config?: {
              url?: string;
              content_type?: string;
              insecure_ssl?: string;
              secret?: string;
            };
            updated_at?: string;
            created_at?: string;
            url?: string;
            ping_url?: string;
          };
        };
      };
    };
  };
  "enterprise-admin/update-global-webhook": {
    /**
     * Update a global webhook
     * @description Parameters that are not provided will be overwritten with the default value or removed if no default exists.
     */
    parameters: {
      /** @description This API is under preview and subject to change. */
      header: {
        accept: string;
      };
      /** @description The unique identifier of the hook. */
      path: {
        hook_id: number;
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          /** @description Key/value pairs to provide settings for this webhook. */
          config?: {
            /** @description The URL to which the payloads will be delivered. */
            url: string;
            /** @description The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`. */
            content_type?: string;
            /** @description If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value in the [`X-Hub-Signature`](https://docs.github.com/enterprise-server@3.2/webhooks/event-payloads/#delivery-headers) header. */
            secret?: string;
            /** @description Determines whether the SSL certificate of the host for `url` will be verified when delivering payloads. Supported values include `0` (verification is performed) and `1` (verification is not performed). The default is `0`. **We strongly recommend not setting this to `1` as you are subject to man-in-the-middle and other attacks.** */
            insecure_ssl?: string;
          };
          /** @description The [events](https://docs.github.com/enterprise-server@3.2/webhooks/event-payloads) that trigger this webhook. A global webhook can be triggered by `user` and `organization` events. Default: `user` and `organization`. */
          events?: string[];
          /**
           * @description Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.
           * @default true
           */
          active?: boolean;
        };
      };
    };
    responses: {
      /** @description Response */
      200: {
        content: {
          "application/json": {
            type?: string;
            id?: number;
            name?: string;
            active?: boolean;
            events?: string[];
            config?: {
              url?: string;
              content_type?: string;
              insecure_ssl?: string;
            };
            updated_at?: string;
            created_at?: string;
            url?: string;
            ping_url?: string;
          };
        };
      };
    };
  };
  "actions/get-job-for-workflow-run": {
    /**
     * Get a job for a workflow run
     * @description Gets a specific job in a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
     */
    parameters: {
      /** @description The account owner of the repository. The name is not case sensitive. */
      /** @description The name of the repository. The name is not case sensitive. */
      /** @description The unique identifier of the job. */
      path: {
        owner: string;
        repo: string;
        job_id: number;
      };
    };
    responses: {
      /** @description Response */
      200: {
        content: {
          "application/json": {
            /**
             * @description The id of the job.
             * @example 21
             */
            id: number;
            /**
             * @description The id of the associated workflow run.
             * @example 5
             */
            run_id: number;
            /** @example https://api.github.com/repos/github/hello-world/actions/runs/5 */
            run_url: string;
            /** @example MDg6Q2hlY2tSdW40 */
            node_id: string;
            /**
             * @description The SHA of the commit that is being run.
             * @example 009b8a3a9ccbb128af87f9b1c0f4c62e8a304f6d
             */
            head_sha: string;
            /** @example https://api.github.com/repos/github/hello-world/actions/jobs/21 */
            url: string;
            /** @example https://github.com/github/hello-world/runs/4 */
            html_url: string | null;
            /**
             * @description The phase of the lifecycle that the job is currently in.
             * @example queued
             * @enum {string}
             */
            status: "queued" | "in_progress" | "completed";
            /**
             * @description The outcome of the job.
             * @example success
             */
            conclusion: string | null;
            /**
             * Format: date-time
             * @description The time that the job started, in ISO 8601 format.
             * @example 2019-08-08T08:00:00-07:00
             */
            started_at: string;
            /**
             * Format: date-time
             * @description The time that the job finished, in ISO 8601 format.
             * @example 2019-08-08T08:00:00-07:00
             */
            completed_at: string | null;
            /**
             * @description The name of the job.
             * @example test-coverage
             */
            name: string;
            /** @description Steps in this job. */
            steps?: {
              /**
               * @description The phase of the lifecycle that the job is currently in.
               * @example queued
               * @enum {string}
               */
              status: "queued" | "in_progress" | "completed";
              /**
               * @description The outcome of the job.
               * @example success
               */
              conclusion: string | null;
              /**
               * @description The name of the job.
               * @example test-coverage
               */
              name: string;
              /** @example 1 */
              number: number;
              /**
               * Format: date-time
               * @description The time that the step started, in ISO 8601 format.
               * @example 2019-08-08T08:00:00-07:00
               */
              started_at?: string | null;
              /**
               * Format: date-time
               * @description The time that the job finished, in ISO 8601 format.
               * @example 2019-08-08T08:00:00-07:00
               */
              completed_at?: string | null;
            }[];
            /** @example https://api.github.com/repos/github/hello-world/check-runs/4 */
            check_run_url: string;
          };
        };
      };
    };
  };
  "actions/list-jobs-for-workflow-run": {
    /**
     * List jobs for a workflow run
     * @description Lists jobs for a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/enterprise-server@3.2/rest/overview/resources-in-the-rest-api#parameters).
     */
    parameters: {
      /** @description Filters jobs by their `completed_at` timestamp. `latest` returns jobs from the most recent execution of the workflow run. `all` returns all jobs for a workflow run, including from old executions of the workflow run. */
      /** @description The number of results per page (max 100). */
      /** @description Page number of the results to fetch. */
      query: {
        filter?: "latest" | "all";
        per_page?: number;
        page?: number;
      };
      /** @description The account owner of the repository. The name is not case sensitive. */
      /** @description The name of the repository. The name is not case sensitive. */
      /** @description The unique identifier of the workflow run. */
      path: {
        owner: string;
        repo: string;
        run_id: number;
      };
    };
    responses: {
      /** @description Response */
      200: {
        headers: {
          /** @example <https://api.github.com/resource?page=2>; rel="next", <https://api.github.com/resource?page=5>; rel="last" */
          Link?: string;
        };
        content: {
          "application/json": {
            total_count: number;
            jobs: {
              /**
               * @description The id of the job.
               * @example 21
               */
              id: number;
              /**
               * @description The id of the associated workflow run.
               * @example 5
               */
              run_id: number;
              /** @example https://api.github.com/repos/github/hello-world/actions/runs/5 */
              run_url: string;
              /** @example MDg6Q2hlY2tSdW40 */
              node_id: string;
              /**
               * @description The SHA of the commit that is being run.
               * @example 009b8a3a9ccbb128af87f9b1c0f4c62e8a304f6d
               */
              head_sha: string;
              /** @example https://api.github.com/repos/github/hello-world/actions/jobs/21 */
              url: string;
              /** @example https://github.com/github/hello-world/runs/4 */
              html_url: string | null;
              /**
               * @description The phase of the lifecycle that the job is currently in.
               * @example queued
               * @enum {string}
               */
              status: "queued" | "in_progress" | "completed";
              /**
               * @description The outcome of the job.
               * @example success
               */
              conclusion: string | null;
              /**
               * Format: date-time
               * @description The time that the job started, in ISO 8601 format.
               * @example 2019-08-08T08:00:00-07:00
               */
              started_at: string;
              /**
               * Format: date-time
               * @description The time that the job finished, in ISO 8601 format.
               * @example 2019-08-08T08:00:00-07:00
               */
              completed_at: string | null;
              /**
               * @description The name of the job.
               * @example test-coverage
               */
              name: string;
              /** @description Steps in this job. */
              steps?: {
                /**
                 * @description The phase of the lifecycle that the job is currently in.
                 * @example queued
                 * @enum {string}
                 */
                status: "queued" | "in_progress" | "completed";
                /**
                 * @description The outcome of the job.
                 * @example success
                 */
                conclusion: string | null;
                /**
                 * @description The name of the job.
                 * @example test-coverage
                 */
                name: string;
                /** @example 1 */
                number: number;
                /**
                 * Format: date-time
                 * @description The time that the step started, in ISO 8601 format.
                 * @example 2019-08-08T08:00:00-07:00
                 */
                started_at?: string | null;
                /**
                 * Format: date-time
                 * @description The time that the job finished, in ISO 8601 format.
                 * @example 2019-08-08T08:00:00-07:00
                 */
                completed_at?: string | null;
              }[];
              /** @example https://api.github.com/repos/github/hello-world/check-runs/4 */
              check_run_url: string;
            }[];
          };
        };
      };
    };
  };
  "code-scanning/get-alert": {
    /**
     * Get a code scanning alert
     * @description Gets a single code scanning alert. You must use an access token with the `security_events` scope to use this endpoint. GitHub Apps must have the `security_events` read permission to use this endpoint.
     *
     * **Deprecation notice**:
     * The instances field is deprecated and will, in future, not be included in the response for this endpoint. The example response reflects this change. The same information can now be retrieved via a GET request to the URL specified by `instances_url`.
     */
    parameters: {
      /** @description The account owner of the repository. The name is not case sensitive. */
      /** @description The name of the repository. The name is not case sensitive. */
      /** @description The number that identifies an alert. You can find this at the end of the URL for a code scanning alert within GitHub, and in the `number` field in the response from the `GET /repos/{owner}/{repo}/code-scanning/alerts` operation. */
      path: {
        owner: string;
        repo: string;
        alert_number: number;
      };
    };
    responses: {
      /** @description Response */
      200: {
        content: {
          "application/json": {
            /** @description The security alert number. */
            number: number;
            /**
             * Format: date-time
             * @description The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
             */
            created_at: string;
            /**
             * Format: uri
             * @description The REST API URL of the alert resource.
             */
            url: string;
            /**
             * Format: uri
             * @description The GitHub URL of the alert resource.
             */
            html_url: string;
            /**
             * Format: uri
             * @description The REST API URL for fetching the list of instances for an alert.
             */
            instances_url: string;
            /**
             * @description State of a code scanning alert.
             * @enum {string}
             */
            state: "open" | "closed" | "dismissed" | "fixed";
            /**
             * Simple User
             * @description Simple User
             */
            dismissed_by: {
              name?: string | null;
              email?: string | null;
              /** @example octocat */
              login: string;
              /** @example 1 */
              id: number;
              /** @example MDQ6VXNlcjE= */
              node_id: string;
              /**
               * Format: uri
               * @example https://github.com/images/error/octocat_happy.gif
               */
              avatar_url: string;
              /** @example 41d064eb2195891e12d0413f63227ea7 */
              gravatar_id: string | null;
              /**
               * Format: uri
               * @example https://api.github.com/users/octocat
               */
              url: string;
              /**
               * Format: uri
               * @example https://github.com/octocat
               */
              html_url: string;
              /**
               * Format: uri
               * @example https://api.github.com/users/octocat/followers
               */
              followers_url: string;
              /** @example https://api.github.com/users/octocat/following{/other_user} */
              following_url: string;
              /** @example https://api.github.com/users/octocat/gists{/gist_id} */
              gists_url: string;
              /** @example https://api.github.com/users/octocat/starred{/owner}{/repo} */
              starred_url: string;
              /**
               * Format: uri
               * @example https://api.github.com/users/octocat/subscriptions
               */
              subscriptions_url: string;
              /**
               * Format: uri
               * @example https://api.github.com/users/octocat/orgs
               */
              organizations_url: string;
              /**
               * Format: uri
               * @example https://api.github.com/users/octocat/repos
               */
              repos_url: string;
              /** @example https://api.github.com/users/octocat/events{/privacy} */
              events_url: string;
              /**
               * Format: uri
               * @example https://api.github.com/users/octocat/received_events
               */
              received_events_url: string;
              /** @example User */
              type: string;
              site_admin: boolean;
              /** @example "2020-07-09T00:17:55Z" */
              starred_at?: string;
            } | null;
            /**
             * Format: date-time
             * @description The time that the alert was dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
             */
            dismissed_at: string | null;
            /**
             * @description **Required when the state is dismissed.** The reason for dismissing or closing the alert.
             * @enum {string|null}
             */
            dismissed_reason:
              | ""
              | "false positive"
              | "won't fix"
              | "used in tests"
              | null;
            rule: {
              /** @description A unique identifier for the rule used to detect the alert. */
              id?: string | null;
              /** @description The name of the rule used to detect the alert. */
              name?: string;
              /**
               * @description The severity of the alert.
               * @enum {string|null}
               */
              severity?: "none" | "note" | "warning" | "error" | null;
              /**
               * @description The security severity of the alert.
               * @enum {string|null}
               */
              security_severity_level?:
                | "low"
                | "medium"
                | "high"
                | "critical"
                | null;
              /** @description A short description of the rule used to detect the alert. */
              description?: string;
              /** @description description of the rule used to detect the alert. */
              full_description?: string;
              /** @description A set of tags applicable for the rule. */
              tags?: string[] | null;
              /** @description Detailed documentation for the rule as GitHub Flavored Markdown. */
              help?: string | null;
            };
            tool: {
              /** @description The name of the tool used to generate the code scanning analysis. */
              name?: string;
              /** @description The version of the tool used to generate the code scanning analysis. */
              version?: string | null;
              /** @description The GUID of the tool used to generate the code scanning analysis, if provided in the uploaded SARIF data. */
              guid?: string | null;
            };
            most_recent_instance: {
              /**
               * @description The full Git reference, formatted as `refs/heads/<branch name>`,
               * `refs/pull/<number>/merge`, or `refs/pull/<number>/head`.
               */
              ref?: string;
              /** @description Identifies the configuration under which the analysis was executed. For example, in GitHub Actions this includes the workflow filename and job name. */
              analysis_key?: string;
              /** @description Identifies the variable values associated with the environment in which the analysis that generated this alert instance was performed, such as the language that was analyzed. */
              environment?: string;
              /** @description Identifies the configuration under which the analysis was executed. Used to distinguish between multiple analyses for the same tool and commit, but performed on different languages or different parts of the code. */
              category?: string;
              /**
               * @description State of a code scanning alert.
               * @enum {string}
               */
              state?: "open" | "closed" | "dismissed" | "fixed";
              commit_sha?: string;
              message?: {
                text?: string;
              };
              /** @description Describe a region within a file for the alert. */
              location?: {
                path?: string;
                start_line?: number;
                end_line?: number;
                start_column?: number;
                end_column?: number;
              };
              html_url?: string;
              /**
               * @description Classifications that have been applied to the file that triggered the alert.
               * For example identifying it as documentation, or a generated file.
               */
              classifications?: (
                | "source"
                | "generated"
                | "test"
                | "library"
                | null
              )[];
            };
            /** @deprecated */
            instances?: Record<string, never>;
          };
        };
      };
      /** @description Response if GitHub Advanced Security is not enabled for this repository */
      403: {
        content: {
          "application/json": {
            message?: string;
            documentation_url?: string;
            url?: string;
            status?: string;
          };
        };
      };
      /** @description Resource not found */
      404: {
        content: {
          "application/json": {
            message?: string;
            documentation_url?: string;
            url?: string;
            status?: string;
          };
        };
      };
      /** @description Service unavailable */
      503: {
        content: {
          "application/json": {
            code?: string;
            message?: string;
            documentation_url?: string;
          };
        };
      };
    };
  };
  "code-scanning/update-alert": {
    /**
     * Update a code scanning alert
     * @description Updates the status of a single code scanning alert. You must use an access token with the `security_events` scope to use this endpoint. GitHub Apps must have the `security_events` write permission to use this endpoint.
     */
    parameters: {
      /** @description The account owner of the repository. The name is not case sensitive. */
      /** @description The name of the repository. The name is not case sensitive. */
      /** @description The number that identifies an alert. You can find this at the end of the URL for a code scanning alert within GitHub, and in the `number` field in the response from the `GET /repos/{owner}/{repo}/code-scanning/alerts` operation. */
      path: {
        owner: string;
        repo: string;
        alert_number: number;
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /**
           * @description Sets the state of the code scanning alert. You must provide `dismissed_reason` when you set the state to `dismissed`.
           * @enum {string}
           */
          state: "open" | "dismissed";
          /**
           * @description **Required when the state is dismissed.** The reason for dismissing or closing the alert.
           * @enum {string|null}
           */
          dismissed_reason?:
            | ""
            | "false positive"
            | "won't fix"
            | "used in tests"
            | null;
        };
      };
    };
    responses: {
      /** @description Response */
      200: {
        content: {
          "application/json": {
            /** @description The security alert number. */
            number: number;
            /**
             * Format: date-time
             * @description The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
             */
            created_at: string;
            /**
             * Format: uri
             * @description The REST API URL of the alert resource.
             */
            url: string;
            /**
             * Format: uri
             * @description The GitHub URL of the alert resource.
             */
            html_url: string;
            /**
             * Format: uri
             * @description The REST API URL for fetching the list of instances for an alert.
             */
            instances_url: string;
            /**
             * @description State of a code scanning alert.
             * @enum {string}
             */
            state: "open" | "closed" | "dismissed" | "fixed";
            /**
             * Simple User
             * @description Simple User
             */
            dismissed_by: {
              name?: string | null;
              email?: string | null;
              /** @example octocat */
              login: string;
              /** @example 1 */
              id: number;
              /** @example MDQ6VXNlcjE= */
              node_id: string;
              /**
               * Format: uri
               * @example https://github.com/images/error/octocat_happy.gif
               */
              avatar_url: string;
              /** @example 41d064eb2195891e12d0413f63227ea7 */
              gravatar_id: string | null;
              /**
               * Format: uri
               * @example https://api.github.com/users/octocat
               */
              url: string;
              /**
               * Format: uri
               * @example https://github.com/octocat
               */
              html_url: string;
              /**
               * Format: uri
               * @example https://api.github.com/users/octocat/followers
               */
              followers_url: string;
              /** @example https://api.github.com/users/octocat/following{/other_user} */
              following_url: string;
              /** @example https://api.github.com/users/octocat/gists{/gist_id} */
              gists_url: string;
              /** @example https://api.github.com/users/octocat/starred{/owner}{/repo} */
              starred_url: string;
              /**
               * Format: uri
               * @example https://api.github.com/users/octocat/subscriptions
               */
              subscriptions_url: string;
              /**
               * Format: uri
               * @example https://api.github.com/users/octocat/orgs
               */
              organizations_url: string;
              /**
               * Format: uri
               * @example https://api.github.com/users/octocat/repos
               */
              repos_url: string;
              /** @example https://api.github.com/users/octocat/events{/privacy} */
              events_url: string;
              /**
               * Format: uri
               * @example https://api.github.com/users/octocat/received_events
               */
              received_events_url: string;
              /** @example User */
              type: string;
              site_admin: boolean;
              /** @example "2020-07-09T00:17:55Z" */
              starred_at?: string;
            } | null;
            /**
             * Format: date-time
             * @description The time that the alert was dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
             */
            dismissed_at: string | null;
            /**
             * @description **Required when the state is dismissed.** The reason for dismissing or closing the alert.
             * @enum {string|null}
             */
            dismissed_reason:
              | ""
              | "false positive"
              | "won't fix"
              | "used in tests"
              | null;
            rule: {
              /** @description A unique identifier for the rule used to detect the alert. */
              id?: string | null;
              /** @description The name of the rule used to detect the alert. */
              name?: string;
              /**
               * @description The severity of the alert.
               * @enum {string|null}
               */
              severity?: "none" | "note" | "warning" | "error" | null;
              /**
               * @description The security severity of the alert.
               * @enum {string|null}
               */
              security_severity_level?:
                | "low"
                | "medium"
                | "high"
                | "critical"
                | null;
              /** @description A short description of the rule used to detect the alert. */
              description?: string;
              /** @description description of the rule used to detect the alert. */
              full_description?: string;
              /** @description A set of tags applicable for the rule. */
              tags?: string[] | null;
              /** @description Detailed documentation for the rule as GitHub Flavored Markdown. */
              help?: string | null;
            };
            tool: {
              /** @description The name of the tool used to generate the code scanning analysis. */
              name?: string;
              /** @description The version of the tool used to generate the code scanning analysis. */
              version?: string | null;
              /** @description The GUID of the tool used to generate the code scanning analysis, if provided in the uploaded SARIF data. */
              guid?: string | null;
            };
            most_recent_instance: {
              /**
               * @description The full Git reference, formatted as `refs/heads/<branch name>`,
               * `refs/pull/<number>/merge`, or `refs/pull/<number>/head`.
               */
              ref?: string;
              /** @description Identifies the configuration under which the analysis was executed. For example, in GitHub Actions this includes the workflow filename and job name. */
              analysis_key?: string;
              /** @description Identifies the variable values associated with the environment in which the analysis that generated this alert instance was performed, such as the language that was analyzed. */
              environment?: string;
              /** @description Identifies the configuration under which the analysis was executed. Used to distinguish between multiple analyses for the same tool and commit, but performed on different languages or different parts of the code. */
              category?: string;
              /**
               * @description State of a code scanning alert.
               * @enum {string}
               */
              state?: "open" | "closed" | "dismissed" | "fixed";
              commit_sha?: string;
              message?: {
                text?: string;
              };
              /** @description Describe a region within a file for the alert. */
              location?: {
                path?: string;
                start_line?: number;
                end_line?: number;
                start_column?: number;
                end_column?: number;
              };
              html_url?: string;
              /**
               * @description Classifications that have been applied to the file that triggered the alert.
               * For example identifying it as documentation, or a generated file.
               */
              classifications?: (
                | "source"
                | "generated"
                | "test"
                | "library"
                | null
              )[];
            };
            /** @deprecated */
            instances?: Record<string, never>;
          };
        };
      };
      /** @description Response if the repository is archived or if github advanced security is not enabled for this repository */
      403: {
        content: {
          "application/json": {
            message?: string;
            documentation_url?: string;
            url?: string;
            status?: string;
          };
        };
      };
      /** @description Resource not found */
      404: {
        content: {
          "application/json": {
            message?: string;
            documentation_url?: string;
            url?: string;
            status?: string;
          };
        };
      };
      /** @description Service unavailable */
      503: {
        content: {
          "application/json": {
            code?: string;
            message?: string;
            documentation_url?: string;
          };
        };
      };
    };
  };
  "code-scanning/list-recent-analyses": {
    /**
     * List code scanning analyses for a repository
     * @description Lists the details of all code scanning analyses for a repository,
     * starting with the most recent.
     * The response is paginated and you can use the `page` and `per_page` parameters
     * to list the analyses you're interested in.
     * By default 30 analyses are listed per page.
     *
     * The `rules_count` field in the response give the number of rules
     * that were run in the analysis.
     * For very old analyses this data is not available,
     * and `0` is returned in this field.
     *
     * You must use an access token with the `security_events` scope to use this endpoint.
     * GitHub Apps must have the `security_events` read permission to use this endpoint.
     *
     * **Deprecation notice**:
     * The `tool_name` field is deprecated and will, in future, not be included in the response for this endpoint. The example response reflects this change. The tool name can now be found inside the `tool` field.
     */
    parameters: {
      /** @description The name of a code scanning tool. Only results by this tool will be listed. You can specify the tool by using either `tool_name` or `tool_guid`, but not both. */
      /** @description The GUID of a code scanning tool. Only results by this tool will be listed. Note that some code scanning tools may not include a GUID in their analysis data. You can specify the tool by using either `tool_guid` or `tool_name`, but not both. */
      /** @description Page number of the results to fetch. */
      /** @description The number of results per page (max 100). */
      /** @description The Git reference for the analyses you want to list. The `ref` for a branch can be formatted either as `refs/heads/<branch name>` or simply `<branch name>`. To reference a pull request use `refs/pull/<number>/merge`. */
      /** @description Filter analyses belonging to the same SARIF upload. */
      query: {
        tool_name?: string;
        tool_guid?: string | null;
        page?: number;
        per_page?: number;
        ref?: string;
        sarif_id?: string;
      };
      /** @description The account owner of the repository. The name is not case sensitive. */
      /** @description The name of the repository. The name is not case sensitive. */
      path: {
        owner: string;
        repo: string;
      };
    };
    responses: {
      /** @description Response */
      200: {
        content: {
          "application/json": {
            /**
             * @description The full Git reference, formatted as `refs/heads/<branch name>`,
             * `refs/pull/<number>/merge`, or `refs/pull/<number>/head`.
             */
            ref: string;
            /** @description The SHA of the commit to which the analysis you are uploading relates. */
            commit_sha: string;
            /** @description Identifies the configuration under which the analysis was executed. For example, in GitHub Actions this includes the workflow filename and job name. */
            analysis_key: string;
            /** @description Identifies the variable values associated with the environment in which this analysis was performed. */
            environment: string;
            /** @description Identifies the configuration under which the analysis was executed. Used to distinguish between multiple analyses for the same tool and commit, but performed on different languages or different parts of the code. */
            category?: string;
            /** @example error reading field xyz */
            error: string;
            /**
             * Format: date-time
             * @description The time that the analysis was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
             */
            created_at: string;
            /** @description The total number of results in the analysis. */
            results_count: number;
            /** @description The total number of rules used in the analysis. */
            rules_count: number;
            /** @description Unique identifier for this analysis. */
            id: number;
            /**
             * Format: uri
             * @description The REST API URL of the analysis resource.
             */
            url: string;
            /**
             * @description An identifier for the upload.
             * @example 6c81cd8e-b078-4ac3-a3be-1dad7dbd0b53
             */
            sarif_id: string;
            tool: {
              /** @description The name of the tool used to generate the code scanning analysis. */
              name?: string;
              /** @description The version of the tool used to generate the code scanning analysis. */
              version?: string | null;
              /** @description The GUID of the tool used to generate the code scanning analysis, if provided in the uploaded SARIF data. */
              guid?: string | null;
            };
            deletable: boolean;
            /**
             * @description Warning generated when processing the analysis
             * @example 123 results were ignored
             */
            warning: string;
            tool_name?: string;
          }[];
        };
      };
      /** @description Response if GitHub Advanced Security is not enabled for this repository */
      403: {
        content: {
          "application/json": {
            message?: string;
            documentation_url?: string;
            url?: string;
            status?: string;
          };
        };
      };
      /** @description Resource not found */
      404: {
        content: {
          "application/json": {
            message?: string;
            documentation_url?: string;
            url?: string;
            status?: string;
          };
        };
      };
      /** @description Service unavailable */
      503: {
        content: {
          "application/json": {
            code?: string;
            message?: string;
            documentation_url?: string;
          };
        };
      };
    };
  };
  "code-scanning/get-analysis": {
    /**
     * Get a code scanning analysis for a repository
     * @description Gets a specified code scanning analysis for a repository.
     * You must use an access token with the `security_events` scope to use this endpoint.
     * GitHub Apps must have the `security_events` read permission to use this endpoint.
     *
     * The default JSON response contains fields that describe the analysis.
     * This includes the Git reference and commit SHA to which the analysis relates,
     * the datetime of the analysis, the name of the code scanning tool,
     * and the number of alerts.
     *
     * The `rules_count` field in the default response give the number of rules
     * that were run in the analysis.
     * For very old analyses this data is not available,
     * and `0` is returned in this field.
     *
     * If you use the Accept header `application/sarif+json`,
     * the response contains the analysis data that was uploaded.
     * This is formatted as
     * [SARIF version 2.1.0](https://docs.oasis-open.org/sarif/sarif/v2.1.0/cs01/sarif-v2.1.0-cs01.html).
     *
     * **Deprecation notice**:
     * The `tool_name` field is deprecated and will, in future, not be included in the response for this endpoint. The example response reflects this change. The tool name can now be found inside the `tool` field.
     */
    parameters: {
      /** @description The account owner of the repository. The name is not case sensitive. */
      /** @description The name of the repository. The name is not case sensitive. */
      /** @description The ID of the analysis, as returned from the `GET /repos/{owner}/{repo}/code-scanning/analyses` operation. */
      path: {
        owner: string;
        repo: string;
        analysis_id: number;
      };
    };
    responses: {
      /** @description Response */
      200: {
        content: {
          "application/json": {
            /**
             * @description The full Git reference, formatted as `refs/heads/<branch name>`,
             * `refs/pull/<number>/merge`, or `refs/pull/<number>/head`.
             */
            ref: string;
            /** @description The SHA of the commit to which the analysis you are uploading relates. */
            commit_sha: string;
            /** @description Identifies the configuration under which the analysis was executed. For example, in GitHub Actions this includes the workflow filename and job name. */
            analysis_key: string;
            /** @description Identifies the variable values associated with the environment in which this analysis was performed. */
            environment: string;
            /** @description Identifies the configuration under which the analysis was executed. Used to distinguish between multiple analyses for the same tool and commit, but performed on different languages or different parts of the code. */
            category?: string;
            /** @example error reading field xyz */
            error: string;
            /**
             * Format: date-time
             * @description The time that the analysis was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
             */
            created_at: string;
            /** @description The total number of results in the analysis. */
            results_count: number;
            /** @description The total number of rules used in the analysis. */
            rules_count: number;
            /** @description Unique identifier for this analysis. */
            id: number;
            /**
             * Format: uri
             * @description The REST API URL of the analysis resource.
             */
            url: string;
            /**
             * @description An identifier for the upload.
             * @example 6c81cd8e-b078-4ac3-a3be-1dad7dbd0b53
             */
            sarif_id: string;
            tool: {
              /** @description The name of the tool used to generate the code scanning analysis. */
              name?: string;
              /** @description The version of the tool used to generate the code scanning analysis. */
              version?: string | null;
              /** @description The GUID of the tool used to generate the code scanning analysis, if provided in the uploaded SARIF data. */
              guid?: string | null;
            };
            deletable: boolean;
            /**
             * @description Warning generated when processing the analysis
             * @example 123 results were ignored
             */
            warning: string;
            tool_name?: string;
          };
          "application/json+sarif": {
            [key: string]: unknown | undefined;
          };
        };
      };
      /** @description Response if GitHub Advanced Security is not enabled for this repository */
      403: {
        content: {
          "application/json": {
            message?: string;
            documentation_url?: string;
            url?: string;
            status?: string;
          };
        };
      };
      /** @description Resource not found */
      404: {
        content: {
          "application/json": {
            message?: string;
            documentation_url?: string;
            url?: string;
            status?: string;
          };
        };
      };
      /** @description Service unavailable */
      503: {
        content: {
          "application/json": {
            code?: string;
            message?: string;
            documentation_url?: string;
          };
        };
      };
    };
  };
  "reactions/create-for-commit-comment": {
    /**
     * Create reaction for a commit comment
     * @description Create a reaction to a [commit comment](https://docs.github.com/enterprise-server@3.2/rest/reference/repos#comments). A response with an HTTP `200` status means that you already added the reaction type to this commit comment.
     */
    parameters: {
      /** @description The account owner of the repository. The name is not case sensitive. */
      /** @description The name of the repository. The name is not case sensitive. */
      /** @description The unique identifier of the comment. */
      path: {
        owner: string;
        repo: string;
        comment_id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /**
           * @description The [reaction type](https://docs.github.com/enterprise-server@3.2/rest/reference/reactions#reaction-types) to add to the commit comment.
           * @enum {string}
           */
          content:
            | "+1"
            | "-1"
            | "laugh"
            | "confused"
            | "heart"
            | "hooray"
            | "rocket"
            | "eyes";
        };
      };
    };
    responses: {
      /** @description Reaction exists */
      200: {
        content: {
          "application/json": {
            /** @example 1 */
            id: number;
            /** @example MDg6UmVhY3Rpb24x */
            node_id: string;
            /**
             * Simple User
             * @description Simple User
             */
            user: {
              name?: string | null;
              email?: string | null;
              /** @example octocat */
              login: string;
              /** @example 1 */
              id: number;
              /** @example MDQ6VXNlcjE= */
              node_id: string;
              /**
               * Format: uri
               * @example https://github.com/images/error/octocat_happy.gif
               */
              avatar_url: string;
              /** @example 41d064eb2195891e12d0413f63227ea7 */
              gravatar_id: string | null;
              /**
               * Format: uri
               * @example https://api.github.com/users/octocat
               */
              url: string;
              /**
               * Format: uri
               * @example https://github.com/octocat
               */
              html_url: string;
              /**
               * Format: uri
               * @example https://api.github.com/users/octocat/followers
               */
              followers_url: string;
              /** @example https://api.github.com/users/octocat/following{/other_user} */
              following_url: string;
              /** @example https://api.github.com/users/octocat/gists{/gist_id} */
              gists_url: string;
              /** @example https://api.github.com/users/octocat/starred{/owner}{/repo} */
              starred_url: string;
              /**
               * Format: uri
               * @example https://api.github.com/users/octocat/subscriptions
               */
              subscriptions_url: string;
              /**
               * Format: uri
               * @example https://api.github.com/users/octocat/orgs
               */
              organizations_url: string;
              /**
               * Format: uri
               * @example https://api.github.com/users/octocat/repos
               */
              repos_url: string;
              /** @example https://api.github.com/users/octocat/events{/privacy} */
              events_url: string;
              /**
               * Format: uri
               * @example https://api.github.com/users/octocat/received_events
               */
              received_events_url: string;
              /** @example User */
              type: string;
              site_admin: boolean;
              /** @example "2020-07-09T00:17:55Z" */
              starred_at?: string;
            } | null;
            /**
             * @description The reaction to use
             * @example heart
             * @enum {string}
             */
            content:
              | "+1"
              | "-1"
              | "laugh"
              | "confused"
              | "heart"
              | "hooray"
              | "rocket"
              | "eyes";
            /**
             * Format: date-time
             * @example 2016-05-20T20:09:31Z
             */
            created_at: string;
          };
        };
      };
      /** @description Reaction created */
      201: {
        content: {
          "application/json": {
            /** @example 1 */
            id: number;
            /** @example MDg6UmVhY3Rpb24x */
            node_id: string;
            /**
             * Simple User
             * @description Simple User
             */
            user: {
              name?: string | null;
              email?: string | null;
              /** @example octocat */
              login: string;
              /** @example 1 */
              id: number;
              /** @example MDQ6VXNlcjE= */
              node_id: string;
              /**
               * Format: uri
               * @example https://github.com/images/error/octocat_happy.gif
               */
              avatar_url: string;
              /** @example 41d064eb2195891e12d0413f63227ea7 */
              gravatar_id: string | null;
              /**
               * Format: uri
               * @example https://api.github.com/users/octocat
               */
              url: string;
              /**
               * Format: uri
               * @example https://github.com/octocat
               */
              html_url: string;
              /**
               * Format: uri
               * @example https://api.github.com/users/octocat/followers
               */
              followers_url: string;
              /** @example https://api.github.com/users/octocat/following{/other_user} */
              following_url: string;
              /** @example https://api.github.com/users/octocat/gists{/gist_id} */
              gists_url: string;
              /** @example https://api.github.com/users/octocat/starred{/owner}{/repo} */
              starred_url: string;
              /**
               * Format: uri
               * @example https://api.github.com/users/octocat/subscriptions
               */
              subscriptions_url: string;
              /**
               * Format: uri
               * @example https://api.github.com/users/octocat/orgs
               */
              organizations_url: string;
              /**
               * Format: uri
               * @example https://api.github.com/users/octocat/repos
               */
              repos_url: string;
              /** @example https://api.github.com/users/octocat/events{/privacy} */
              events_url: string;
              /**
               * Format: uri
               * @example https://api.github.com/users/octocat/received_events
               */
              received_events_url: string;
              /** @example User */
              type: string;
              site_admin: boolean;
              /** @example "2020-07-09T00:17:55Z" */
              starred_at?: string;
            } | null;
            /**
             * @description The reaction to use
             * @example heart
             * @enum {string}
             */
            content:
              | "+1"
              | "-1"
              | "laugh"
              | "confused"
              | "heart"
              | "hooray"
              | "rocket"
              | "eyes";
            /**
             * Format: date-time
             * @example 2016-05-20T20:09:31Z
             */
            created_at: string;
          };
        };
      };
      /** @description Preview header missing */
      415: {
        content: {
          "application/json": {
            message: string;
            documentation_url: string;
          };
        };
      };
      /** @description Validation failed */
      422: {
        content: {
          "application/json": {
            message: string;
            documentation_url: string;
            errors?: {
              resource?: string;
              field?: string;
              message?: string;
              code: string;
              index?: number;
              value?: (string | null) | (number | null) | (string[] | null);
            }[];
          };
        };
      };
    };
  };
  "repos/create-release": {
    /**
     * Create a release
     * @description Users with push access to the repository can create a release.
     *
     * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/enterprise-server@3.2/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/enterprise-server@3.2/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
     */
    parameters: {
      /** @description The account owner of the repository. The name is not case sensitive. */
      /** @description The name of the repository. The name is not case sensitive. */
      path: {
        owner: string;
        repo: string;
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** @description The name of the tag. */
          tag_name: string;
          /** @description Specifies the commitish value that determines where the Git tag is created from. Can be any branch or commit SHA. Unused if the Git tag already exists. Default: the repository's default branch (usually `master`). */
          target_commitish?: string;
          /** @description The name of the release. */
          name?: string;
          /** @description Text describing the contents of the tag. */
          body?: string;
          /**
           * @description `true` to create a draft (unpublished) release, `false` to create a published one.
           * @default false
           */
          draft?: boolean;
          /**
           * @description `true` to identify the release as a prerelease. `false` to identify the release as a full release.
           * @default false
           */
          prerelease?: boolean;
        };
      };
    };
    responses: {
      /** @description Response */
      201: {
        headers: {
          /** @example https://api.github.com/repos/octocat/Hello-World/releases/1 */
          Location?: string;
        };
        content: {
          "application/json": {
            /** Format: uri */
            url: string;
            /** Format: uri */
            html_url: string;
            /** Format: uri */
            assets_url: string;
            upload_url: string;
            /** Format: uri */
            tarball_url: string | null;
            /** Format: uri */
            zipball_url: string | null;
            id: number;
            node_id: string;
            /**
             * @description The name of the tag.
             * @example v1.0.0
             */
            tag_name: string;
            /**
             * @description Specifies the commitish value that determines where the Git tag is created from.
             * @example master
             */
            target_commitish: string;
            name: string | null;
            body?: string | null;
            /**
             * @description true to create a draft (unpublished) release, false to create a published one.
             * @example false
             */
            draft: boolean;
            /**
             * @description Whether to identify the release as a prerelease or a full release.
             * @example false
             */
            prerelease: boolean;
            /** Format: date-time */
            created_at: string;
            /** Format: date-time */
            published_at: string | null;
            /**
             * Simple User
             * @description Simple User
             */
            author: {
              name?: string | null;
              email?: string | null;
              /** @example octocat */
              login: string;
              /** @example 1 */
              id: number;
              /** @example MDQ6VXNlcjE= */
              node_id: string;
              /**
               * Format: uri
               * @example https://github.com/images/error/octocat_happy.gif
               */
              avatar_url: string;
              /** @example 41d064eb2195891e12d0413f63227ea7 */
              gravatar_id: string | null;
              /**
               * Format: uri
               * @example https://api.github.com/users/octocat
               */
              url: string;
              /**
               * Format: uri
               * @example https://github.com/octocat
               */
              html_url: string;
              /**
               * Format: uri
               * @example https://api.github.com/users/octocat/followers
               */
              followers_url: string;
              /** @example https://api.github.com/users/octocat/following{/other_user} */
              following_url: string;
              /** @example https://api.github.com/users/octocat/gists{/gist_id} */
              gists_url: string;
              /** @example https://api.github.com/users/octocat/starred{/owner}{/repo} */
              starred_url: string;
              /**
               * Format: uri
               * @example https://api.github.com/users/octocat/subscriptions
               */
              subscriptions_url: string;
              /**
               * Format: uri
               * @example https://api.github.com/users/octocat/orgs
               */
              organizations_url: string;
              /**
               * Format: uri
               * @example https://api.github.com/users/octocat/repos
               */
              repos_url: string;
              /** @example https://api.github.com/users/octocat/events{/privacy} */
              events_url: string;
              /**
               * Format: uri
               * @example https://api.github.com/users/octocat/received_events
               */
              received_events_url: string;
              /** @example User */
              type: string;
              site_admin: boolean;
              /** @example "2020-07-09T00:17:55Z" */
              starred_at?: string;
            };
            assets: {
              /** Format: uri */
              url: string;
              /** Format: uri */
              browser_download_url: string;
              id: number;
              node_id: string;
              /**
               * @description The file name of the asset.
               * @example Team Environment
               */
              name: string;
              label: string | null;
              /**
               * @description State of the release asset.
               * @enum {string}
               */
              state: "uploaded" | "open";
              content_type: string;
              size: number;
              download_count: number;
              /** Format: date-time */
              created_at: string;
              /** Format: date-time */
              updated_at: string;
              /**
               * Simple User
               * @description Simple User
               */
              uploader: {
                name?: string | null;
                email?: string | null;
                /** @example octocat */
                login: string;
                /** @example 1 */
                id: number;
                /** @example MDQ6VXNlcjE= */
                node_id: string;
                /**
                 * Format: uri
                 * @example https://github.com/images/error/octocat_happy.gif
                 */
                avatar_url: string;
                /** @example 41d064eb2195891e12d0413f63227ea7 */
                gravatar_id: string | null;
                /**
                 * Format: uri
                 * @example https://api.github.com/users/octocat
                 */
                url: string;
                /**
                 * Format: uri
                 * @example https://github.com/octocat
                 */
                html_url: string;
                /**
                 * Format: uri
                 * @example https://api.github.com/users/octocat/followers
                 */
                followers_url: string;
                /** @example https://api.github.com/users/octocat/following{/other_user} */
                following_url: string;
                /** @example https://api.github.com/users/octocat/gists{/gist_id} */
                gists_url: string;
                /** @example https://api.github.com/users/octocat/starred{/owner}{/repo} */
                starred_url: string;
                /**
                 * Format: uri
                 * @example https://api.github.com/users/octocat/subscriptions
                 */
                subscriptions_url: string;
                /**
                 * Format: uri
                 * @example https://api.github.com/users/octocat/orgs
                 */
                organizations_url: string;
                /**
                 * Format: uri
                 * @example https://api.github.com/users/octocat/repos
                 */
                repos_url: string;
                /** @example https://api.github.com/users/octocat/events{/privacy} */
                events_url: string;
                /**
                 * Format: uri
                 * @example https://api.github.com/users/octocat/received_events
                 */
                received_events_url: string;
                /** @example User */
                type: string;
                site_admin: boolean;
                /** @example "2020-07-09T00:17:55Z" */
                starred_at?: string;
              } | null;
            }[];
            body_html?: string;
            body_text?: string;
            mentions_count?: number;
            /** Reaction Rollup */
            reactions?: {
              /** Format: uri */
              url: string;
              total_count: number;
              "+1": number;
              "-1": number;
              laugh: number;
              confused: number;
              heart: number;
              hooray: number;
              eyes: number;
              rocket: number;
            };
          };
        };
      };
      /** @description Validation failed */
      422: {
        content: {
          "application/json": {
            message: string;
            documentation_url: string;
            errors?: {
              resource?: string;
              field?: string;
              message?: string;
              code: string;
              index?: number;
              value?: (string | null) | (number | null) | (string[] | null);
            }[];
          };
        };
      };
    };
  };
  "reactions/list-for-release": {
    /**
     * List reactions for a release
     * @description List the reactions to a [release](https://docs.github.com/enterprise-server@3.2/rest/reference/repos#releases).
     */
    parameters: {
      /** @description Returns a single [reaction type](https://docs.github.com/enterprise-server@3.2/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a release. */
      /** @description The number of results per page (max 100). */
      /** @description Page number of the results to fetch. */
      query: {
        content?: "+1" | "laugh" | "heart" | "hooray" | "rocket" | "eyes";
        per_page?: number;
        page?: number;
      };
      /** @description The account owner of the repository. The name is not case sensitive. */
      /** @description The name of the repository. The name is not case sensitive. */
      /** @description The unique identifier of the release. */
      path: {
        owner: string;
        repo: string;
        release_id: number;
      };
    };
    responses: {
      /** @description Response */
      200: {
        headers: {
          /** @example <https://api.github.com/resource?page=2>; rel="next", <https://api.github.com/resource?page=5>; rel="last" */
          Link?: string;
        };
        content: {
          "application/json": {
            /** @example 1 */
            id: number;
            /** @example MDg6UmVhY3Rpb24x */
            node_id: string;
            /**
             * Simple User
             * @description Simple User
             */
            user: {
              name?: string | null;
              email?: string | null;
              /** @example octocat */
              login: string;
              /** @example 1 */
              id: number;
              /** @example MDQ6VXNlcjE= */
              node_id: string;
              /**
               * Format: uri
               * @example https://github.com/images/error/octocat_happy.gif
               */
              avatar_url: string;
              /** @example 41d064eb2195891e12d0413f63227ea7 */
              gravatar_id: string | null;
              /**
               * Format: uri
               * @example https://api.github.com/users/octocat
               */
              url: string;
              /**
               * Format: uri
               * @example https://github.com/octocat
               */
              html_url: string;
              /**
               * Format: uri
               * @example https://api.github.com/users/octocat/followers
               */
              followers_url: string;
              /** @example https://api.github.com/users/octocat/following{/other_user} */
              following_url: string;
              /** @example https://api.github.com/users/octocat/gists{/gist_id} */
              gists_url: string;
              /** @example https://api.github.com/users/octocat/starred{/owner}{/repo} */
              starred_url: string;
              /**
               * Format: uri
               * @example https://api.github.com/users/octocat/subscriptions
               */
              subscriptions_url: string;
              /**
               * Format: uri
               * @example https://api.github.com/users/octocat/orgs
               */
              organizations_url: string;
              /**
               * Format: uri
               * @example https://api.github.com/users/octocat/repos
               */
              repos_url: string;
              /** @example https://api.github.com/users/octocat/events{/privacy} */
              events_url: string;
              /**
               * Format: uri
               * @example https://api.github.com/users/octocat/received_events
               */
              received_events_url: string;
              /** @example User */
              type: string;
              site_admin: boolean;
              /** @example "2020-07-09T00:17:55Z" */
              starred_at?: string;
            } | null;
            /**
             * @description The reaction to use
             * @example heart
             * @enum {string}
             */
            content:
              | "+1"
              | "-1"
              | "laugh"
              | "confused"
              | "heart"
              | "hooray"
              | "rocket"
              | "eyes";
            /**
             * Format: date-time
             * @example 2016-05-20T20:09:31Z
             */
            created_at: string;
          }[];
        };
      };
      /** @description Resource not found */
      404: {
        content: {
          "application/json": {
            message?: string;
            documentation_url?: string;
            url?: string;
            status?: string;
          };
        };
      };
      /** @description Preview header missing */
      415: {
        content: {
          "application/json": {
            message: string;
            documentation_url: string;
          };
        };
      };
    };
  };
  "repos/get-all-topics": {
    /** Get all repository topics */
    parameters: {
      /** @description Page number of the results to fetch. */
      /** @description The number of results per page (max 100). */
      query: {
        page?: number;
        per_page?: number;
      };
      /** @description The account owner of the repository. The name is not case sensitive. */
      /** @description The name of the repository. The name is not case sensitive. */
      path: {
        owner: string;
        repo: string;
      };
    };
    responses: {
      /** @description Response */
      200: {
        content: {
          "application/json": {
            names: string[];
          };
        };
      };
      /** @description Resource not found */
      404: {
        content: {
          "application/json": {
            message?: string;
            documentation_url?: string;
            url?: string;
            status?: string;
          };
        };
      };
      /** @description Preview header missing */
      415: {
        content: {
          "application/json": {
            message: string;
            documentation_url: string;
          };
        };
      };
    };
  };
  "repos/replace-all-topics": {
    /** Replace all repository topics */
    parameters: {
      /** @description The account owner of the repository. The name is not case sensitive. */
      /** @description The name of the repository. The name is not case sensitive. */
      path: {
        owner: string;
        repo: string;
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** @description An array of topics to add to the repository. Pass one or more topics to _replace_ the set of existing topics. Send an empty array (`[]`) to clear all topics from the repository. **Note:** Topic `names` cannot contain uppercase letters. */
          names: string[];
        };
      };
    };
    responses: {
      /** @description Response */
      200: {
        content: {
          "application/json": {
            names: string[];
          };
        };
      };
      /** @description Resource not found */
      404: {
        content: {
          "application/json": {
            message?: string;
            documentation_url?: string;
            url?: string;
            status?: string;
          };
        };
      };
      /** @description Preview header missing */
      415: {
        content: {
          "application/json": {
            message: string;
            documentation_url: string;
          };
        };
      };
      /** @description Validation failed */
      422: {
        content: {
          "application/json": {
            message: string;
            documentation_url: string;
            errors?: string[];
          };
        };
      };
    };
  };
  "search/topics": {
    /**
     * Search topics
     * @description Find topics via various criteria. Results are sorted by best match. This method returns up to 100 results [per page](https://docs.github.com/enterprise-server@3.2/rest/overview/resources-in-the-rest-api#pagination). See "[Searching topics](https://docs.github.com/articles/searching-topics/)" for a detailed list of qualifiers.
     *
     * When searching for topics, you can get text match metadata for the topic's **short\_description**, **description**, **name**, or **display\_name** field when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/enterprise-server@3.2/rest/reference/search#text-match-metadata).
     *
     * For example, if you want to search for topics related to Ruby that are featured on https://github.com/topics. Your query might look like this:
     *
     * `q=ruby+is:featured`
     *
     * This query searches for topics with the keyword `ruby` and limits the results to find only topics that are featured. The topics that are the best match for the query appear first in the search results.
     */
    parameters: {
      /** @description The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub Enterprise Server. The REST API supports the same qualifiers as the web interface for GitHub Enterprise Server. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/enterprise-server@3.2/rest/reference/search#constructing-a-search-query). */
      /** @description The number of results per page (max 100). */
      /** @description Page number of the results to fetch. */
      query: {
        q: string;
        per_page?: number;
        page?: number;
      };
    };
    responses: {
      /** @description Response */
      200: {
        content: {
          "application/json": {
            total_count: number;
            incomplete_results: boolean;
            items: {
              name: string;
              display_name: string | null;
              short_description: string | null;
              description: string | null;
              created_by: string | null;
              released: string | null;
              /** Format: date-time */
              created_at: string;
              /** Format: date-time */
              updated_at: string;
              featured: boolean;
              curated: boolean;
              score: number;
              repository_count?: number | null;
              /** Format: uri */
              logo_url?: string | null;
              /** Search Result Text Matches */
              text_matches?: {
                object_url?: string;
                object_type?: string | null;
                property?: string;
                fragment?: string;
                matches?: {
                  text?: string;
                  indices?: number[];
                }[];
              }[];
              related?:
                | {
                    topic_relation?: {
                      id?: number;
                      name?: string;
                      topic_id?: number;
                      relation_type?: string;
                    };
                  }[]
                | null;
              aliases?:
                | {
                    topic_relation?: {
                      id?: number;
                      name?: string;
                      topic_id?: number;
                      relation_type?: string;
                    };
                  }[]
                | null;
            }[];
          };
        };
      };
      /** @description Not modified */
      304: never;
      /** @description Preview header missing */
      415: {
        content: {
          "application/json": {
            message: string;
            documentation_url: string;
          };
        };
      };
    };
  };
  "projects/create-for-authenticated-user": {
    /** Create a user project */
    requestBody: {
      content: {
        "application/json": {
          /**
           * @description Name of the project
           * @example Week One Sprint
           */
          name: string;
          /**
           * @description Body of the project
           * @example This project represents the sprint of the first week in January
           */
          body?: string | null;
        };
      };
    };
    responses: {
      /** @description Response */
      201: {
        content: {
          "application/json": {
            /**
             * Format: uri
             * @example https://api.github.com/repos/api-playground/projects-test
             */
            owner_url: string;
            /**
             * Format: uri
             * @example https://api.github.com/projects/1002604
             */
            url: string;
            /**
             * Format: uri
             * @example https://github.com/api-playground/projects-test/projects/12
             */
            html_url: string;
            /**
             * Format: uri
             * @example https://api.github.com/projects/1002604/columns
             */
            columns_url: string;
            /** @example 1002604 */
            id: number;
            /** @example MDc6UHJvamVjdDEwMDI2MDQ= */
            node_id: string;
            /**
             * @description Name of the project
             * @example Week One Sprint
             */
            name: string;
            /**
             * @description Body of the project
             * @example This project represents the sprint of the first week in January
             */
            body: string | null;
            /** @example 1 */
            number: number;
            /**
             * @description State of the project; either 'open' or 'closed'
             * @example open
             */
            state: string;
            /**
             * Simple User
             * @description Simple User
             */
            creator: {
              name?: string | null;
              email?: string | null;
              /** @example octocat */
              login: string;
              /** @example 1 */
              id: number;
              /** @example MDQ6VXNlcjE= */
              node_id: string;
              /**
               * Format: uri
               * @example https://github.com/images/error/octocat_happy.gif
               */
              avatar_url: string;
              /** @example 41d064eb2195891e12d0413f63227ea7 */
              gravatar_id: string | null;
              /**
               * Format: uri
               * @example https://api.github.com/users/octocat
               */
              url: string;
              /**
               * Format: uri
               * @example https://github.com/octocat
               */
              html_url: string;
              /**
               * Format: uri
               * @example https://api.github.com/users/octocat/followers
               */
              followers_url: string;
              /** @example https://api.github.com/users/octocat/following{/other_user} */
              following_url: string;
              /** @example https://api.github.com/users/octocat/gists{/gist_id} */
              gists_url: string;
              /** @example https://api.github.com/users/octocat/starred{/owner}{/repo} */
              starred_url: string;
              /**
               * Format: uri
               * @example https://api.github.com/users/octocat/subscriptions
               */
              subscriptions_url: string;
              /**
               * Format: uri
               * @example https://api.github.com/users/octocat/orgs
               */
              organizations_url: string;
              /**
               * Format: uri
               * @example https://api.github.com/users/octocat/repos
               */
              repos_url: string;
              /** @example https://api.github.com/users/octocat/events{/privacy} */
              events_url: string;
              /**
               * Format: uri
               * @example https://api.github.com/users/octocat/received_events
               */
              received_events_url: string;
              /** @example User */
              type: string;
              site_admin: boolean;
              /** @example "2020-07-09T00:17:55Z" */
              starred_at?: string;
            } | null;
            /**
             * Format: date-time
             * @example 2011-04-10T20:09:31Z
             */
            created_at: string;
            /**
             * Format: date-time
             * @example 2014-03-03T18:58:10Z
             */
            updated_at: string;
            /**
             * @description The baseline permission that all organization members have on this project. Only present if owner is an organization.
             * @enum {string}
             */
            organization_permission?: "read" | "write" | "admin" | "none";
            /** @description Whether or not this project can be seen by everyone. Only present if owner is an organization. */
            private?: boolean;
          };
        };
      };
      /** @description Not modified */
      304: never;
      /** @description Requires authentication */
      401: {
        content: {
          "application/json": {
            message?: string;
            documentation_url?: string;
            url?: string;
            status?: string;
          };
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": {
            message?: string;
            documentation_url?: string;
            url?: string;
            status?: string;
          };
        };
      };
      /** @description Preview header missing */
      415: {
        content: {
          "application/json": {
            message: string;
            documentation_url: string;
          };
        };
      };
      /** @description Validation failed */
      422: {
        content: {
          "application/json": {
            message: string;
            documentation_url: string;
            errors?: string[];
          };
        };
      };
    };
  };
}
